// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/pijar/goals/complete-article": {
            "put": {
                "description": "Mark an article as completed in a goal",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Goals"
                ],
                "summary": "Complete an article progress",
                "parameters": [
                    {
                        "description": "Completion Data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CompleteArticleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GoalProgressResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/pijar/goals/{user_id}": {
            "get": {
                "description": "Retrieve all goals for a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Goals"
                ],
                "summary": "Get user goals",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new learning goal with articles to read",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Goals"
                ],
                "summary": "Create a new goal",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Goal data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateGoalRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.GoalResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/pijar/goals/{user_id}/{id}": {
            "put": {
                "description": "Update goal details including articles to read",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Goals"
                ],
                "summary": "Update a goal",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Goal ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateGoalRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.GoalProgressResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Permanently delete a goal and its progress",
                "tags": [
                    "Goals"
                ],
                "summary": "Delete a goal",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Goal ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contoh: {'message':'Goal successfully deleted'}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ArticleProgress": {
            "type": "object",
            "properties": {
                "article_id": {
                    "type": "integer",
                    "example": 1
                },
                "completed": {
                    "type": "boolean",
                    "example": true
                },
                "date_completed": {
                    "type": "string",
                    "example": "2023-08-15 14:30:00"
                }
            }
        },
        "dto.CompleteArticleRequest": {
            "type": "object",
            "required": [
                "article_id",
                "goal_id",
                "user_id"
            ],
            "properties": {
                "article_id": {
                    "type": "integer",
                    "example": 1
                },
                "goal_id": {
                    "type": "integer",
                    "example": 1
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.CreateGoalRequest": {
            "type": "object",
            "required": [
                "task",
                "title"
            ],
            "properties": {
                "articles_to_read": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        1,
                        2,
                        3
                    ]
                },
                "task": {
                    "type": "string",
                    "example": "Study Go basics"
                },
                "title": {
                    "type": "string",
                    "example": "Learn Golang"
                }
            }
        },
        "dto.GoalProgressResponse": {
            "type": "object",
            "properties": {
                "articles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ArticleProgress"
                    }
                },
                "completed": {
                    "type": "boolean",
                    "example": false
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-08-15 14:30:00"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "task": {
                    "type": "string",
                    "example": "Study Go basics"
                },
                "title": {
                    "type": "string",
                    "example": "Learn Golang"
                },
                "total_articles": {
                    "type": "integer",
                    "example": 3
                },
                "total_completed": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "dto.GoalResponse": {
            "type": "object",
            "properties": {
                "articles_to_read": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        1,
                        2,
                        3
                    ]
                },
                "completed": {
                    "type": "boolean",
                    "example": false
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-08-15 14:30:00"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "task": {
                    "type": "string",
                    "example": "Study Go basics"
                },
                "title": {
                    "type": "string",
                    "example": "Learn Golang"
                }
            }
        },
        "dto.UpdateGoalRequest": {
            "type": "object",
            "required": [
                "task",
                "title"
            ],
            "properties": {
                "articles_to_read": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "example": [
                        4,
                        5,
                        6
                    ]
                },
                "completed": {
                    "type": "boolean",
                    "example": false
                },
                "task": {
                    "type": "string",
                    "example": "Study concurrency"
                },
                "title": {
                    "type": "string",
                    "example": "Advanced Golang"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
